#include <bits/stdc++.h>
using namespace std;
#define endl "\n"
#define ll long long
#define fast ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define mod 998244353


void buildree(vector<ll>&v1, vector<ll>&segtree, ll low, ll high, ll pos)
{

  if(low==high)
    {segtree[pos]=v1[low];
     return;
    }

  ll mid=(low+high)/2;
  buildree(v1,segtree,low,mid,2*pos+1);
  buildree(v1,segtree,mid+1,high,2*pos+2);

  segtree[pos]=min(segtree[2*pos+1],segtree[2*pos+2]);

}


int queryProcessing(vector<ll>&segtree, ll ql, ll qh, ll low, ll high, ll pos)
{
//ql => query_lower_range
//qh => query_upper_range
//low => low of orignal array size
//high => high of orignal array size
// pos => pos of segment Tree array  

  if(ql>high||qh<low)  //no overlap
  {
    return INT_MAX;
  }

  if(low>=ql&&high<=qh)   //total overlap
  {
    return segtree[pos];
  } 

  int mid=(low+high)/2;   //partial overlap
  int lmin=queryProcessing(segtree, ql,qh, low,mid,2*pos+1);
  int rmin=queryProcessing(segtree, ql,qh, mid+1,high,2*pos+2);

  return min(lmin,rmin);


}

int segtreeSize(int n)
{
  int k=1;
  while(n/k>1)
  {
    k*=2;
  }
if(n%k==0)
  return 2*k-1;
return 4*k-1;


}



int main()
{
  fast
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

vector<ll>v1={-1,2,4,0};
int n=v1.size();

int segSize=segtreeSize(n);
//size of segment tree: if n divisible by power of 2 => 2*n-1
//size of segment tree: if n not divisible by power of 2 => 2*k-1 (k is next power of 2)
vector<ll>segtree(segSize,INT_MAX);

buildree(v1,segtree,0,n-1,0);
for(int i=0;i<segtree.size();i++)
cout<<segtree[i]<<" ";

cout<<endl;
cout<<queryProcessing(segtree, 1,3,0,n-1,0 );


  return 0;
}
